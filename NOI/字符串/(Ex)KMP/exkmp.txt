st = f[i-20]....f[i-1]

f[i-20]f[i-19]....f[i-1]0

st = f[i-19]....f[i]

S = "ababa"
c = 'b'
cS = "bababa"
增加了：babab、bababa，两个
先求出 cS 的 z 函数

b
ba
bab
baba
babab
bababa
找到在 S 中出现过的最长前缀：baba，然后在它之后的肯定都没出现过


S = abaabaabaabaaba
z = 15 * * 12 * * 9 * * 6 * * 3 * *

S = aabb aabb aabb aabb
z = 16 *** 12 *** 8 *** 4 ***

T = aba
T = S[1...i]，其中 i 是 n 的因数

枚举 n 的因数 i，看 z[i*k+1] 是否构成等差数列

for(int i = 1; i <= n; i++)
    for(int k = 1; i*k<n; k++)
       ......

n/1 + n/2 + n/3 + ... +n/n = n ln n

如果 S[1...i] 是循环节，那么一定会有 z[i+1] == n-i

如果 z[i+1]==n-i 呢？能否说明 S[1...i] 就是循环节？

S = #### #### #### ####
z[5]=12 意味着
       **** **** ****
              **** **** ****
所以每四个都是相等的，也就是说 S[1...4] 确实是循环节。


S = AT (T是回文)
       ATA'
希望 T 尽可能长
求：最长回文后缀。（和最长回文前缀完全类似）


1. 如何判断一个后缀是不是完美子串？(判断 z[i]==n-i+1)
2. 如何统计每一个前缀作为子串的出现次数？

cnt[k]：长为k的前缀作为子串出现了几次

对于每一个i，令 cnt[1...z[i]]++

令 cnt[z[i]]++

i 循环结束后，对 cnt 数组求后缀和。

for(int i = 1; i <= n; i++)
    for(int j = 1; j <= z[i]; j++)
        cnt[j]++;

for(int i = 1; i <= n; i++) cnt[z[i]]++;
for(int i = n-1; i >= 1; i--) cnt[i] += cnt[i+1];
